
精选题目

C# 基础知识

1.值类型和引用类型有什么不同

  1）值类型存储在内存栈中，引用类型数据存储在内存堆中，而内存单元中存放的是堆中存放的地址。
  2）值类型存取快，引用类型存取慢。
  3）值类型表示实际数据，引用类型表示指向存储在内存堆中的数据的指针和引用。
  4）栈的内存是自动释放的，堆内存是.NET中会由GC来自动释放。
  5）值类型继承自System.ValueType,引用类型继承自System.Object。

2.装箱和拆箱 作用是什么 如何避免

  装箱：将值类型转换为引用类型
  拆箱：引用类型转换为值类型
  作用：利用装箱和拆箱功能，可通过允许值类型的任何值与Object 类型的值相互转换，将值类型与引用类型链接起来
  避免：1.可以通过重载函数来避免  2.可以通过泛型来避免

3.接口和抽象类
  1、抽象类和接口都不能直接实例化。如果要实例化，抽象类变量必须指向实现所有抽象方法的子类对象，接口变量必须指向实现所有接口方法的类对象。
  2、抽象类要被子类继承，接口要被类实现。
  3、接口只能做方法申明，抽象类中可以做方法申明，也可以做方法实现
  4、接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。
  5、抽象类里的抽象方法必须全部被子类所实现，如果子类不能全部实现父类抽象方法，那么该子类只能是抽象类。
　　 同样，实现接口的时候，如不能全部实现接口方法，那么该类也只能为抽象类。
  6、抽象方法只能申明，不能实现。
  7、抽象类里可以没有抽象方法
  8、如果一个类里有抽象方法，那么这个类只能是抽象类
  9、抽象方法要被实现，所以不能是静态的，也不能是私有的。
  10、接口可以继承接口，并且可多继承接口，但类只能单一继承。
  11.接口可以通过匿名内部类实例化。
　　接口是对动作的抽象，抽象类是对根源的抽象。抽象类表示的是，这个对象是什么。而接口表示的是，这个对象能做什么。

4.String、StringBuffer与StringBuilder之间区别

  1、基本区别
    String的对象不可变，StringBuffer和StringBuilder的对象是可变的
  2、性能区别
    三者中StringBuilder执行速度最佳，StringBuffer次之，String的执行速度最慢
    （String为字符串常量，而StringBuilder和StringBuffer均为字符串变量，String对象一旦创建后该对象是不可更改的，后两者的对象是变量是可以更改的）
  3、安全区别
    String、StringBuffer是线程安全的，StringBuilder是线程不安全的（所以如果程序是单线程的使用StringBuilder效率高，如果是多线程使用StringBuffer或者String）
    
    什么是线程安全，线程不安全？
      线程安全是指多个线程在执行同一段代码的时候采用加锁机制，使每次的执行结果和单线程执行的结果都是一样的，不存在执行结果的二义性。
      线程不安全就是不提供加锁机制保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据。
      
    相关方法
	StringBuilder.Append 将信息追加到当前 StringBuilder 的结尾。
	StringBuilder.AppendFormat 用带格式文本替换字符串中传递的格式说明符。
	StringBuilder.Insert 将字符串或对象插入到当前 StringBuilder 对象的指定索引处。
	StringBuilder.Remove 从当前 StringBuilder 对象中移除指定数量的字符。
	StringBuilder.Replace 替换指定索引处的指定字符。
	
5.浅拷贝 和 深拷贝 
  
  浅拷贝 获取一个引用类型指向堆的地址
  深拷贝 会重新创造出一个数据

6.public、private、protected、internal、sealed的区别

  public全局、private类内部、protected派生类、internal本程序集
  sealed声明类就不能继承，声明方法就是不能被重写

7.foreach迭代器遍历和for循环遍历的区别

  如果集合需要foreach遍历，是否可行，存在一定问题
  foreach中的迭代变量item是的只读，不能对其进行修改，比如list.Remove（item）操作
  foreach只读的时候记录下来，在对记录做操作，或者直接用for循环遍历
  foreach对int[]数组循环已经不产生GC，避免对ArrayList进行遍历

  for语句中初始化变量i的作用域，循环体内部可见。
  通过索引进行遍历，可以根据索引对所遍历集合进行修改
  unity中for循环使用lambda表达式注意闭包问题

  Foreach遍历原理
    任何集合类（Array）对象都有一个GetEnumerator()方法，该方法可以返回一个实现了 IEnumerator接口的对象。
    这个返回的IEnumerator对象既不是集合类对象，也不是集合的元素类对象，它是一个独立的类对象。
    通过这个实现了 IEnumerator接口对象A，可以遍历访问集合类对象中的每一个元素对象
    对象A访问MoveNext方法，方法为真，就可以访问Current方法，读取到集合的元素。

	    List<string> list = new List<string>() { "25", "哈3", "26", "花朵" };
 		  IEnumerator listEnumerator = list.GetEnumerator();
        while (listEnumerator.MoveNext())
        {
            Console.WriteLine(listEnumerator.Current);
        }

8.反射的实现原理

  定义：运行时，动态获取类型信息,动态创建对象,动态访问成员的过程。 
  另一种定义：审查元数据并收集元数据的信息。
  元数据：编译后的最基本数据单元，就是一堆表，反射就是解析这些元数据。
  反射是在运行期间获取到类、对象、方法、数据的一种手段
  主要使用类库System.Reflection
  反射要点：如何获取类型，根据类型来动态创建对象，反射获取方法以及动态调用方法，动态创建委托
  
 一、动态获取类型信息
  1.System.Reflection.Assembly.Load(“XXXX.dll”) 动态加载程序集
  2.System.Type.GetType(“XXXX类名”); //动态获取某程序集中某类信息
  3.obj.GetType(); //已知对象获取类信息 ——或者——typeof(类型) //已知类类型

 二、动态创建对象实例（上一步操作后获得类对象）
  System.Activator.CreateInstance(Type type);

 三、动态访问成员调用方法（上一步操作后已获取实例对象）
  System.Reflection.MethodInfo method = type.GetMethod(“方法名”);//获得方法
  System.Reflection.MethodInfo.Invoke(object , new object[]{参数}) //调用的类实例和实例参数

 核心类
  System.Reflection.Assembly 描述程序集
  System.Type 描述类
  System.Reflection.FieldInfo 描述了类的字段
  System.Reflection.ConstructorInfo 描述构造函数
  System.Reflection.MethodInfo 描述类的方法
  System.Reflection.PropertyInfo 描述类的属性

 反射耗性能，lua是动态语言，一种小巧的脚本语言，会使用反射机制。

 知识扩展
  手机端不支持编译，需要热更方案，通过lua的反射机制将旧的DLL文件替换成新的DLL文件。
  Xlua是lua框架，由TX鹅肠进行维护，方便了C#与lua相互调用，C#端实现lua虚拟机
  参考资料太多，主要搜索，C#反射机制，lua，xlua性能等等。


9.Arry ArrayList List之间的区别

 首先Array是数组，ArrayList是集合 List是泛型集合 
 Array可以容纳基本类型和对象 存取快 增删改慢
 ArrayList 存放的数据都会被转化成Object类型 存取慢 增删改快
 List<>需要声明存储的单一类型 存取慢 增删改快

10.委托和事件

11.ref和out关键字有什么区别？知道Ref的深层原理是什么

  ref修饰引用参数。参数必须赋值，带回返回值，又进又出
  out修饰输出参数。参数可以不赋值，带回返回值之前必须明确赋值，
  引用参数和输出参数不会创建新的存储位置

  如果ref参数是值类型，原先的值类型数据，会随着方法里的数据改变而改变，
  如果ref参数值引用类型，方法里重新赋值后，原对象堆中数据会改变，如果对引用类型再次创建新对象并赋值给ref参数，引用地址会重新指向新对象堆数据。
  方法结束后形参和新对象都会消失。实参还是指向原始对象，值不够数据改变了

12.字典Dictionary的内部实现原理

13.结构体和类有什么区别 怎么选择

  结构体是一种值类型，而类是引用类型。如何选择结构体还是类

  1、堆栈的空间有限，对于大量的逻辑的对象，创建类要比创建结构好一些
  2、结构表示如点、矩形和颜色这样的轻量对象，例如，如果声明一个含有 1000 个点对象的数组，则将为引用每个对象分配附加的内存。在此情况下，结构的成本较低。
  3、在表现抽象和多级别的对象层次时，类是最好的选择
  4、大多数情况下该类型只是一些数据时，结构时最佳的选择


14.请简述GC垃圾管理器，和GC产生的原因，并描述如何避免

   GC垃圾回收机制，避免堆内存溢出，定期回收那些没有有效引用的对象内存
   GC优化，就是优化堆内存，减少堆内存，即时回收堆内存
   GC归属于CLR

  如何避免
     1.减少new的次数
     2.字符串拼接使用stringbuilder，字符串比较先定义一个变量存储，防止产生无效内存
     3.list，new时候，规定内存大小
     4.如果要射线检测，应该使用避免GC的方法XXXXNoAlloc函数
     5.foreach迭代器容易导致GC（目前Unity5.5已修复），使用For循环
     6.使用静态变量，GC不会回收存在的对象，但静态变量的引用对象可能被回收
     7.使用枚举替代字符串变量
     8.调用gameobject.tag=="XXX"就会产生内存垃圾；那么采用GameObject.CompareTag()可以避免内存垃圾的产生：
     9.不要在频繁调用的函数中反复进行堆内存分配，比如OnTriggerXXX，Update等函数
     10.在Update函数中，运行有规律的但不需要每一帧执行的代码，可以使用计时器，比如1秒执行一次某些代码！！！



.Net 与 Mono 的关系？
.Net是一个语言平台
Mono为.Net提供集成开发环境，集成并实现了
.NET的编译器、CLR 和基础类库，
使得.Net既可以运行在windows也可以运行于 linux，Unix，Mac OS 等



Lua 基础知识

1.元表 和 元方法

2.Lua实现面向对象的原理

  总结：对象标识、状态、类体系、继承、私有性
  1.表table就是一个对象，对象具有了标识self，状态等相关操作
  2. 使用参数self表示方法的该接受者是对象本身，是面向对象的核心点,冒号操作符可以隐藏该self参数
  3. 类（Class）：每个对象都有一个原型，原型(lua类体系)可以组织多个对象间共享行为
  4. setmetatable(A,{__index=B}) 把B设为A的原型
  5. 继承（Inheritance）：Lua中类也是对象，可以从其他类（对象）中获取方法和没有的字段
  6. 继承特性：可以重新定义（修改实现）在基类继承的任意方法
  7. 多重继承：一个函数function用作__Index元方法，实现多重继承，还需要对父类列表进行查找方法，但多继承复杂性，性能不如单继承，优化，将继承的方法赋值到子类当中
  8. 私有性（很少用）基本思想：两个表表示一个对象，第一个表保存对象的状态在方法的闭包中，第二个表用来保存对象的操作（或接口），用来访问对象本身。使第一个表完成内容私有性。

3.Lua有哪8个类型?简述用途?
  nil 空——可以表示无效值，全局变量（默认赋值为nil），赋值nil ，使其被删除
  number 整数 ——双精度（double）类型的实浮点数
  table 表 —— 数组+哈希表，table的创建通过构造表达式，通常是 { } 创建空表，关联数组：索引可以是数字或者字符串，索引数字一般是从1开始
  string 字符——使用一组双引号或者单引号，…字符串拼接，#字符串长度，值类型
  userdata 自定义——用户自定义，任意存储在变量中的C数据结构
  function 函数——Lua编写函数
  bool 布尔——true或者false
  thread线程——独立线路，用于执行协同程序
  
 4.__index和__newindex元方法的区别
 
  lua为了实现类似于c#继承的功能，有setmetatable函数，为一个子脚本设置一个父脚本，这时候就会用到__index和__newindex属性。
  __index：当子脚本不存在被访问的元素的时候，lua就会调用__index，去父脚本里面查找该元素。
  __newindex：当子脚本不存在被访问的元素，我们却给该元素赋值的时候，默认我们没有给__newindex赋值，lua会直接修改父脚本里面同名元素的值；
  如果我们给__newindex赋值了，即指定了一个函数，定制了一个我们希望进行的操作，lua就会调用该函数，而不会直接去修改父脚本里面的同名元素的值。

Unity 

1.有哪几种光源
  点光源;平行光;聚光灯;区域光源
  
2.脚本生命周期







