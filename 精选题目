
精选题目

C# 基础知识

1.值类型和引用类型有什么不同

  1）值类型存储在内存栈中，引用类型数据存储在内存堆中，而内存单元中存放的是堆中存放的地址。
  2）值类型存取快，引用类型存取慢。
  3）值类型表示实际数据，引用类型表示指向存储在内存堆中的数据的指针和引用。
  4）栈的内存是自动释放的，堆内存是.NET中会由GC来自动释放。
  5）值类型继承自System.ValueType,引用类型继承自System.Object。

2.装箱和拆箱 作用是什么 如何避免

  装箱：将值类型转换为引用类型
  拆箱：引用类型转换为值类型
  作用：利用装箱和拆箱功能，可通过允许值类型的任何值与Object 类型的值相互转换，将值类型与引用类型链接起来
  避免：1.可以通过重载函数来避免  2.可以通过泛型来避免

3.接口和抽象类
  1、抽象类和接口都不能直接实例化。如果要实例化，抽象类变量必须指向实现所有抽象方法的子类对象，接口变量必须指向实现所有接口方法的类对象。
  2、抽象类要被子类继承，接口要被类实现。
  3、接口只能做方法申明，抽象类中可以做方法申明，也可以做方法实现
  4、接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。
  5、抽象类里的抽象方法必须全部被子类所实现，如果子类不能全部实现父类抽象方法，那么该子类只能是抽象类。
　　 同样，实现接口的时候，如不能全部实现接口方法，那么该类也只能为抽象类。
  6、抽象方法只能申明，不能实现。
  7、抽象类里可以没有抽象方法
  8、如果一个类里有抽象方法，那么这个类只能是抽象类
  9、抽象方法要被实现，所以不能是静态的，也不能是私有的。
  10、接口可以继承接口，并且可多继承接口，但类只能单一继承。
  11.接口可以通过匿名内部类实例化。
　　接口是对动作的抽象，抽象类是对根源的抽象。抽象类表示的是，这个对象是什么。而接口表示的是，这个对象能做什么。

4.String、StringBuffer与StringBuilder之间区别

  1、基本区别
    String的对象不可变，StringBuffer和StringBuilder的对象是可变的
  2、性能区别
    三者中StringBuilder执行速度最佳，StringBuffer次之，String的执行速度最慢
    （String为字符串常量，而StringBuilder和StringBuffer均为字符串变量，String对象一旦创建后该对象是不可更改的，后两者的对象是变量是可以更改的）
  3、安全区别
    String、StringBuffer是线程安全的，StringBuilder是线程不安全的（所以如果程序是单线程的使用StringBuilder效率高，如果是多线程使用StringBuffer或者String）
    
    什么是线程安全，线程不安全？
      线程安全是指多个线程在执行同一段代码的时候采用加锁机制，使每次的执行结果和单线程执行的结果都是一样的，不存在执行结果的二义性。
      线程不安全就是不提供加锁机制保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据。

6.public、private、protected、internal、sealed的区别

  public全局、private类内部、protected派生类、internal本程序集
  sealed声明类就不能继承，声明方法就是不能被重写

7.foreach迭代器遍历和for循环遍历的区别

  如果集合需要foreach遍历，是否可行，存在一定问题
  foreach中的迭代变量item是的只读，不能对其进行修改，比如list.Remove（item）操作
  foreach只读的时候记录下来，在对记录做操作，或者直接用for循环遍历
  foreach对int[]数组循环已经不产生GC，避免对ArrayList进行遍历

  for语句中初始化变量i的作用域，循环体内部可见。
  通过索引进行遍历，可以根据索引对所遍历集合进行修改
  unity中for循环使用lambda表达式注意闭包问题

  Foreach遍历原理
    任何集合类（Array）对象都有一个GetEnumerator()方法，该方法可以返回一个实现了 IEnumerator接口的对象。
    这个返回的IEnumerator对象既不是集合类对象，也不是集合的元素类对象，它是一个独立的类对象。
    通过这个实现了 IEnumerator接口对象A，可以遍历访问集合类对象中的每一个元素对象
    对象A访问MoveNext方法，方法为真，就可以访问Current方法，读取到集合的元素。

	    List<string> list = new List<string>() { "25", "哈3", "26", "花朵" };
 		  IEnumerator listEnumerator = list.GetEnumerator();
        while (listEnumerator.MoveNext())
        {
            Console.WriteLine(listEnumerator.Current);
        }

8.反射的实现原理

9.数组，Array，ArrayList的区别

10.委托和事件

11.ref和out关键字有什么区别？知道Ref的深层原理是什么

12.字典Dictionary的内部实现原理

13.结构体和类有什么区别

.Net 与 Mono 的关系？
.Net是一个语言平台
Mono为.Net提供集成开发环境，集成并实现了
.NET的编译器、CLR 和基础类库，
使得.Net既可以运行在windows也可以运行于 linux，Unix，Mac OS 等



Lua 基础知识

1.元表 和 元方法

2.lua怎么模拟对象


Unity 

1.有哪几种光源
  点光源;平行光;聚光灯;区域光源
  
2.脚本生命周期







